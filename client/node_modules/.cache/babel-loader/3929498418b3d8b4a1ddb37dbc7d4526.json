{"ast":null,"code":"var _jsxFileName = \"/home/sasho/reactpr/clothing-shit/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport CollectionPage from \"../category/collection.component\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selector\"; //import Collec from \"../../components/collections-overview/collections-overview.componenet\";\n\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  // state = {\n  //     loading: true\n  // };\n  // unsubsribeFromSnapshot = null;\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); //     const {updateCollections}=this.props;\n    //     const collectionRef=query(collection(firestore,'collections'));\n    //     const getDataFromFireabase = async(collectionRef,updateCollections) =>{\n    //     const snapshot = await getDocs(collectionRef);\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({loading: false });\n    //     }\n    //     getDataFromFireabase(collectionRef,updateCollections);\n  }\n\n  render() {\n    // const { match } = this.props;     \n    //const { loading }=this.state;   \n    const {\n      isCollectionsLoaded\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(CollectionsOverviewContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \":collectionId\",\n          element: /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n            isLoading: !isCollectionsLoaded,\n            animate: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  selectIsCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/home/sasho/reactpr/clothing-shit/src/pages/shop/shop.component.jsx"],"names":["React","Route","Routes","CollectionPage","CollectionsOverviewContainer","connect","fetchCollectionsStartAsync","createStructuredSelector","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","isCollectionsLoaded","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AAEA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,0BAAR,QAAyC,+BAAzC;AACA,SAASC,wBAAT,QAAwC,UAAxC;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,gCAAtE,C,CACA;;AACA,OAAOC,WAAP,MAAwB,sDAAxB;;AAIA,MAAMC,yBAAyB,GAAGD,WAAW,CAACP,cAAD,CAA7C;KAAMQ,yB;;AACN,MAAMC,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AAEnC;AACA;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAER,MAAAA;AAAF,QAAiC,KAAKS,KAA5C;AACAT,IAAAA,0BAA0B,GAFV,CAIpB;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACC;;AAEFU,EAAAA,MAAM,GAAG;AACN;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAyB,KAAKF,KAApC;AACF,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,eAAE,QAAC,4BAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAA4B,UAAA,OAAO,eAAE,QAAC,yBAAD;AAA2B,YAAA,SAAS,EAAE,CAACE,mBAAvC;AAA4D,YAAA,OAAO,EAAE;AAArE;AAAA;AAAA;AAAA;AAAA;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAOA;;AAnCmC;;AAsCvC,MAAMC,eAAe,GAAGX,wBAAwB,CAAC;AAC7CC,EAAAA,0BAA0B,EAAEA,0BADiB;AAE7CS,EAAAA,mBAAmB,EAAER;AAFwB,CAAD,CAAhD;;AAKA,MAAMU,kBAAkB,GAAGC,QAAQ,KAAK;AACpCd,EAAAA,0BAA0B,EAAE,MAAMc,QAAQ,CAACd,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACa,eAAD,EAAiBC,kBAAjB,CAAP,CAA4CP,QAA5C,CAAf","sourcesContent":["import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport CollectionPage from \"../category/collection.component\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\n\nimport { connect } from \"react-redux\";\nimport {fetchCollectionsStartAsync} from \"../../redux/shop/shop.actions\";\nimport { createStructuredSelector} from 'reselect';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selector\";\n//import Collec from \"../../components/collections-overview/collections-overview.componenet\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\n\n\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\nclass ShopPage extends React.Component {\n    \n    // state = {\n    //     loading: true\n    // };\n    // unsubsribeFromSnapshot = null;\n\n    componentDidMount() {\n        const { fetchCollectionsStartAsync } = this.props;\n        fetchCollectionsStartAsync();\n        \n    //     const {updateCollections}=this.props;\n    //     const collectionRef=query(collection(firestore,'collections'));\n\n    //     const getDataFromFireabase = async(collectionRef,updateCollections) =>{\n    //     const snapshot = await getDocs(collectionRef);\n        \n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({loading: false });\n    //     }\n    //     getDataFromFireabase(collectionRef,updateCollections);\n    }\n\n   render (){\n      // const { match } = this.props;     \n      //const { loading }=this.state;   \n      const { isCollectionsLoaded} = this.props;\n    return (\n    <div className='shop-page'>\n        <Routes>\n            <Route path='/' element={<CollectionsOverviewContainer/>}/>\n            <Route path=\":collectionId\" element={<CollectionPageWithSpinner isLoading={!isCollectionsLoaded} animate={true}/>}/>\n        </Routes>\n    </div>);\n   }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    selectIsCollectionFetching: selectIsCollectionFetching,\n    isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}