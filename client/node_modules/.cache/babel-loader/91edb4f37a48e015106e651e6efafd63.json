{"ast":null,"code":"var _jsxFileName = \"/home/sasho/reactpr/clothing-shit/src/components/sign-in/sign-in.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './sign-in.styles.scss';\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { emailSignInStart, googleSignInStart } from \"../../redux/user/user.actions\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = (emailSignInStart, googleSignInStart) => {\n  _s();\n\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  }; //const { googleSignInStart } = this.props;\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"I alread have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign in width your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"email\",\n        type: \"email\",\n        handleChange: handleChange,\n        value: email,\n        label: \"email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"password\",\n        type: \"password\",\n        value: password,\n        handleChange: handleChange,\n        label: \"password\",\n        required: true,\n        autoComplete: \"on\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: googleSignInStart,\n          isGoogleSignIn: true,\n          children: [' ', \"Sign in with google \", ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignIn, \"D045XLO0s7F/D7nDnuBmlfdiLEY=\");\n\n_c = SignIn;\n\nconst mapDIspatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDIspatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/home/sasho/reactpr/clothing-shit/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","FormInput","CustomButton","emailSignInStart","googleSignInStart","connect","SignIn","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","mapDIspatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\n\nimport './sign-in.styles.scss';\n\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { emailSignInStart, googleSignInStart } from \"../../redux/user/user.actions\";\nimport { connect } from \"react-redux\";\n\nconst SignIn = (emailSignInStart, googleSignInStart) => {\n    const [userCredentials, setCredentials] = useState({ email: '', password: '' });\n\n\n    const { email, password } = userCredentials;\n    const handleSubmit = async event => {\n        event.preventDefault();\n        emailSignInStart(email, password);\n    };\n\n    const handleChange = event => {\n        const { value, name } = event.target;\n        setCredentials({ ...userCredentials, [name]: value });\n    };\n    //const { googleSignInStart } = this.props;\n\n    return (\n        <div className=\"sign-in\">\n            <h2>I alread have an account</h2>\n            <span>Sign in width your email and password</span>\n\n            <form onSubmit={handleSubmit}>\n\n                <FormInput name='email' type='email' handleChange={handleChange} value={email} label='email' required />\n\n                <FormInput name='password' type='password' value={password} handleChange={handleChange} label='password' required autoComplete='on' />\n\n                <div className='buttons'>\n                    <CustomButton type=\"submit\">\n                        Sign in\n                    </CustomButton>\n                    <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>\n                        {' '}\n                        Sign in with google {' '}\n\n                    </CustomButton>\n                </div>\n            </form>\n        </div>\n    );\n\n};\n\nconst mapDIspatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password }))\n});\n\nexport default connect(null, mapDIspatchToProps)(SignIn);\n"]},"metadata":{},"sourceType":"module"}