{"ast":null,"code":"var _jsxFileName = \"/home/sasho/reactpr/clothing-shit/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport CollectionPage from \"../category/collection.component\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.componenet\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { collection, onSnapshot, getDocs, query } from \"firebase/firestore\";\nimport { get } from \"firebase/database\";\nimport { connect } from \"react-redux\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\"; //import Collec from \"../../components/collections-overview/collections-overview.componenet\";\n\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loading: true\n    };\n    this.unsubsribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = query(collection(firestore, 'collections'));\n    fetch('https://.firebaseio.com/collections').then(response => response.json()).then(collections => console.log(collections));\n    /* const getDataFromFireabase = async(collectionRef,updateCollections) =>{\n    const snapshot = await getDocs(collectionRef);\n    \n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    updateCollections(collectionsMap);\n    this.setState({loading: false });\n    }\n    getDataFromFireabase(collectionRef,updateCollections); */\n  }\n\n  render() {\n    // const { match } = this.props;     \n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n            isLoading: loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \":collectionId\",\n          element: /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n            isLoading: loading,\n            animate: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["/home/sasho/reactpr/clothing-shit/src/pages/shop/shop.component.jsx"],"names":["React","Route","Routes","CollectionPage","CollectionsOverview","firestore","convertCollectionsSnapshotToMap","collection","onSnapshot","getDocs","query","get","connect","updateCollections","WithSpinner","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubsribeFromSnapshot","componentDidMount","props","collectionRef","fetch","then","response","json","collections","console","log","render","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AAEA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,mBAAP,MAAgC,uEAAhC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,OAAjC,EAA0CC,KAA1C,QAAuD,oBAAvD;AACA,SAASC,GAAT,QAAoB,mBAApB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,+BAAlC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,sDAAxB;;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACV,mBAAD,CAAlD;KAAMW,8B;AACN,MAAMC,yBAAyB,GAAGF,WAAW,CAACX,cAAD,CAA7C;MAAMa,yB;;AACN,MAAMC,QAAN,SAAuBjB,KAAK,CAACkB,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACJC,MAAAA,OAAO,EAAE;AADL,KAD2B;AAAA,SAInCC,sBAJmC,GAIV,IAJU;AAAA;;AAOnCC,EAAAA,iBAAiB,GAAG;AAEhB,UAAM;AAACT,MAAAA;AAAD,QAAoB,KAAKU,KAA/B;AACA,UAAMC,aAAa,GAACd,KAAK,CAACH,UAAU,CAACF,SAAD,EAAW,aAAX,CAAX,CAAzB;AAEAoB,IAAAA,KAAK,CAAC,qCAAD,CAAL,CAA6CC,IAA7C,CAAkDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA9D,EACCF,IADD,CACMG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CADrB;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACK;;AAEFG,EAAAA,MAAM,GAAG;AACN;AACA,UAAM;AAAEZ,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACF,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,eAAE,QAAC,8BAAD;AAAgC,YAAA,SAAS,EAAEC;AAA3C;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAA4B,UAAA,OAAO,eAAE,QAAC,yBAAD;AAA2B,YAAA,SAAS,EAAEA,OAAtC;AAA+C,YAAA,OAAO,EAAE;AAAxD;AAAA;AAAA;AAAA;AAAA;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAOA;;AApCmC;;AAuCvC,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACpCrB,EAAAA,iBAAiB,EAAEsB,cAAc,IAAID,QAAQ,CAACrB,iBAAiB,CAACsB,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIA,eAAevB,OAAO,CAAC,IAAD,EAAMqB,kBAAN,CAAP,CAAiChB,QAAjC,CAAf","sourcesContent":["import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport CollectionPage from \"../category/collection.component\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.componenet\";\n\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { collection, onSnapshot, getDocs, query } from \"firebase/firestore\";\nimport { get } from \"firebase/database\";\n\nimport { connect } from \"react-redux\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\n//import Collec from \"../../components/collections-overview/collections-overview.componenet\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\nclass ShopPage extends React.Component {\n    state = {\n        loading: true\n    };\n    unsubsribeFromSnapshot = null;\n\n\n    componentDidMount() {\n        \n        const {updateCollections}=this.props;\n        const collectionRef=query(collection(firestore,'collections'));\n\n        fetch('https://.firebaseio.com/collections').then(response => response.json())\n        .then(collections => console.log(collections));\n\n\n        /* const getDataFromFireabase = async(collectionRef,updateCollections) =>{\n        const snapshot = await getDocs(collectionRef);\n        \n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({loading: false });\n        }\n        getDataFromFireabase(collectionRef,updateCollections); */\n    }\n\n   render (){\n      // const { match } = this.props;     \n      const { loading }=this.state;   \n    return (\n    <div className='shop-page'>\n        <Routes>\n            <Route path='/' element={<CollectionsOverviewWithSpinner isLoading={loading}/>}/>\n            <Route path=\":collectionId\" element={<CollectionPageWithSpinner isLoading={loading} animate={true}/>}/>\n        </Routes>\n    </div>);\n   }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null,mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}