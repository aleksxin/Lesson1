{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport { getDoc } from \"firebase/firestore\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { auth, createUserProfileDocument, getCurrentUser, gooogleProvider } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signOutFailure, signOutSuccess, signSuccess, signUpFail, signUpSuccessLogin } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield getDoc(userRef);\n    yield put(signSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    })); // console.log(userRef);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, gooogleProvider);\n    yield getSnapshotFromUserAuth(user); // console.log(userRef);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    }\n  } = _ref;\n\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* singOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUpWithEmailAndPasswor(_ref2) {\n  let {\n    payload: {\n      email,\n      password,\n      displayName\n    }\n  } = _ref2;\n\n  try {\n    const {\n      user\n    } = yield createUserWithEmailAndPasswordithEmailAndPassword(auth, email, password); //const {user} = await auth.createUserWithEmailAndPassword(email,password);\n\n    yield put(signUpSuccessLogin({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n    yield createUserProfileDocument(user, {\n      displayName\n    });\n  } catch (error) {\n    yield put(signUpFail(error));\n  }\n}\nexport function* signInAfterSignUp(_ref3) {\n  let {\n    payload: {\n      user,\n      additionalData\n    }\n  } = _ref3;\n  // try{\n  yield getSnapshotFromUserAuth(user, additionalData); // put(emailSignInStart());\n  // }catch (error) {\n  // yield put(signInFailure(error));\n  // }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, singOut);\n}\nexport function* onSignUpInit() {\n  yield takeLatest(UserActionTypes.SIGN_UP_INITIALIZE, signUpWithEmailAndPasswor);\n}\nexport function* onSignUpSucess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpInit), call(onSignUpSucess)]);\n}","map":{"version":3,"sources":["/home/sasho/reactpr/clothing-shit/src/redux/user/user.sagas.js"],"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","getDoc","all","call","put","takeLatest","auth","createUserProfileDocument","getCurrentUser","gooogleProvider","signInFailure","signOutFailure","signOutSuccess","signSuccess","signUpFail","signUpSuccessLogin","UserActionTypes","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","id","data","error","signInWithGoogle","user","signInWithEmail","payload","email","password","isUserAuthenticated","singOut","signOut","signUpWithEmailAndPasswor","displayName","createUserWithEmailAndPasswordithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpInit","SIGN_UP_INITIALIZE","onSignUpSucess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport { getDoc } from \"firebase/firestore\";\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { auth, createUserProfileDocument, getCurrentUser, gooogleProvider } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signOutFailure, signOutSuccess, signSuccess, signUpFail, signUpSuccessLogin } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n        const userSnapshot = yield getDoc(userRef);\n        yield put(signSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n        // console.log(userRef);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const { user } = yield signInWithPopup(auth, gooogleProvider);\n        yield getSnapshotFromUserAuth(user);\n\n        // console.log(userRef);\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n    try {\n        const { user } = yield signInWithEmailAndPassword(auth, email, password);\n        yield getSnapshotFromUserAuth(user);\n\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* isUserAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* singOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSuccess());\n    } catch (error) {\n        yield put(signOutFailure(error));\n    }\n}\n\nexport function* signUpWithEmailAndPasswor({ payload: { email, password, displayName } }) {\n    try {\n        const { user } = yield createUserWithEmailAndPasswordithEmailAndPassword(auth, email, password);\n        //const {user} = await auth.createUserWithEmailAndPassword(email,password);\n        yield put(signUpSuccessLogin({ user, additionalData: { displayName } }));\n        yield createUserProfileDocument(user, { displayName });\n    } catch (error) {\n        yield put(signUpFail(error));\n    }\n\n\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n    // try{\n    yield getSnapshotFromUserAuth(user, additionalData);\n    // put(emailSignInStart());\n    // }catch (error) {\n    // yield put(signInFailure(error));\n    // }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, singOut);\n}\n\nexport function* onSignUpInit() {\n    yield takeLatest(UserActionTypes.SIGN_UP_INITIALIZE, signUpWithEmailAndPasswor);\n}\n\nexport function* onSignUpSucess() {\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpInit), call(onSignUpSucess)]);\n\n}\n\n"]},"metadata":{},"sourceType":"module"}